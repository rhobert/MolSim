// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "InputParameters.h"

namespace PSE_Molekulardynamik_WS12
{
  // nonEmptyString_t
  // 


  // positiveDecimal_t
  // 


  // nonNegativeDecimal_t
  // 


  // dimensionCount_t
  // 


  // positiveDecimalVector_t
  // 

  const positiveDecimalVector_t::x_type& positiveDecimalVector_t::
  x () const
  {
    return this->x_.get ();
  }

  positiveDecimalVector_t::x_type& positiveDecimalVector_t::
  x ()
  {
    return this->x_.get ();
  }

  void positiveDecimalVector_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  void positiveDecimalVector_t::
  x (::std::auto_ptr< x_type > x)
  {
    this->x_.set (x);
  }

  const positiveDecimalVector_t::y_type& positiveDecimalVector_t::
  y () const
  {
    return this->y_.get ();
  }

  positiveDecimalVector_t::y_type& positiveDecimalVector_t::
  y ()
  {
    return this->y_.get ();
  }

  void positiveDecimalVector_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  void positiveDecimalVector_t::
  y (::std::auto_ptr< y_type > x)
  {
    this->y_.set (x);
  }

  const positiveDecimalVector_t::z_type& positiveDecimalVector_t::
  z () const
  {
    return this->z_.get ();
  }

  positiveDecimalVector_t::z_type& positiveDecimalVector_t::
  z ()
  {
    return this->z_.get ();
  }

  void positiveDecimalVector_t::
  z (const z_type& x)
  {
    this->z_.set (x);
  }

  void positiveDecimalVector_t::
  z (::std::auto_ptr< z_type > x)
  {
    this->z_.set (x);
  }


  // decimalVector_t
  // 

  const decimalVector_t::x_type& decimalVector_t::
  x () const
  {
    return this->x_.get ();
  }

  decimalVector_t::x_type& decimalVector_t::
  x ()
  {
    return this->x_.get ();
  }

  void decimalVector_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const decimalVector_t::y_type& decimalVector_t::
  y () const
  {
    return this->y_.get ();
  }

  decimalVector_t::y_type& decimalVector_t::
  y ()
  {
    return this->y_.get ();
  }

  void decimalVector_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const decimalVector_t::z_type& decimalVector_t::
  z () const
  {
    return this->z_.get ();
  }

  decimalVector_t::z_type& decimalVector_t::
  z ()
  {
    return this->z_.get ();
  }

  void decimalVector_t::
  z (const z_type& x)
  {
    this->z_.set (x);
  }


  // positiveIntegerVector_t
  // 

  const positiveIntegerVector_t::x_type& positiveIntegerVector_t::
  x () const
  {
    return this->x_.get ();
  }

  positiveIntegerVector_t::x_type& positiveIntegerVector_t::
  x ()
  {
    return this->x_.get ();
  }

  void positiveIntegerVector_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  void positiveIntegerVector_t::
  x (::std::auto_ptr< x_type > x)
  {
    this->x_.set (x);
  }

  const positiveIntegerVector_t::y_type& positiveIntegerVector_t::
  y () const
  {
    return this->y_.get ();
  }

  positiveIntegerVector_t::y_type& positiveIntegerVector_t::
  y ()
  {
    return this->y_.get ();
  }

  void positiveIntegerVector_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  void positiveIntegerVector_t::
  y (::std::auto_ptr< y_type > x)
  {
    this->y_.set (x);
  }

  const positiveIntegerVector_t::z_type& positiveIntegerVector_t::
  z () const
  {
    return this->z_.get ();
  }

  positiveIntegerVector_t::z_type& positiveIntegerVector_t::
  z ()
  {
    return this->z_.get ();
  }

  void positiveIntegerVector_t::
  z (const z_type& x)
  {
    this->z_.set (x);
  }

  void positiveIntegerVector_t::
  z (::std::auto_ptr< z_type > x)
  {
    this->z_.set (x);
  }


  // nonNegativeIntegerVector_t
  // 

  const nonNegativeIntegerVector_t::x_type& nonNegativeIntegerVector_t::
  x () const
  {
    return this->x_.get ();
  }

  nonNegativeIntegerVector_t::x_type& nonNegativeIntegerVector_t::
  x ()
  {
    return this->x_.get ();
  }

  void nonNegativeIntegerVector_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  void nonNegativeIntegerVector_t::
  x (::std::auto_ptr< x_type > x)
  {
    this->x_.set (x);
  }

  const nonNegativeIntegerVector_t::y_type& nonNegativeIntegerVector_t::
  y () const
  {
    return this->y_.get ();
  }

  nonNegativeIntegerVector_t::y_type& nonNegativeIntegerVector_t::
  y ()
  {
    return this->y_.get ();
  }

  void nonNegativeIntegerVector_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  void nonNegativeIntegerVector_t::
  y (::std::auto_ptr< y_type > x)
  {
    this->y_.set (x);
  }

  const nonNegativeIntegerVector_t::z_type& nonNegativeIntegerVector_t::
  z () const
  {
    return this->z_.get ();
  }

  nonNegativeIntegerVector_t::z_type& nonNegativeIntegerVector_t::
  z ()
  {
    return this->z_.get ();
  }

  void nonNegativeIntegerVector_t::
  z (const z_type& x)
  {
    this->z_.set (x);
  }

  void nonNegativeIntegerVector_t::
  z (::std::auto_ptr< z_type > x)
  {
    this->z_.set (x);
  }


  // inputType_t
  // 

  inputType_t::
  inputType_t (value v)
  : ::xml_schema::string (_xsd_inputType_t_literals_[v])
  {
  }

  inputType_t::
  inputType_t (const char* v)
  : ::xml_schema::string (v)
  {
  }

  inputType_t::
  inputType_t (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  inputType_t::
  inputType_t (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  inputType_t::
  inputType_t (const inputType_t& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  inputType_t& inputType_t::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_inputType_t_literals_[v]);

    return *this;
  }


  // inputFile_t
  // 

  const inputFile_t::type_type& inputFile_t::
  type () const
  {
    return this->type_.get ();
  }

  inputFile_t::type_type& inputFile_t::
  type ()
  {
    return this->type_.get ();
  }

  void inputFile_t::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void inputFile_t::
  type (::std::auto_ptr< type_type > x)
  {
    this->type_.set (x);
  }


  // cuboid_t
  // 

  const cuboid_t::position_type& cuboid_t::
  position () const
  {
    return this->position_.get ();
  }

  cuboid_t::position_type& cuboid_t::
  position ()
  {
    return this->position_.get ();
  }

  void cuboid_t::
  position (const position_type& x)
  {
    this->position_.set (x);
  }

  void cuboid_t::
  position (::std::auto_ptr< position_type > x)
  {
    this->position_.set (x);
  }

  const cuboid_t::velocity_type& cuboid_t::
  velocity () const
  {
    return this->velocity_.get ();
  }

  cuboid_t::velocity_type& cuboid_t::
  velocity ()
  {
    return this->velocity_.get ();
  }

  void cuboid_t::
  velocity (const velocity_type& x)
  {
    this->velocity_.set (x);
  }

  void cuboid_t::
  velocity (::std::auto_ptr< velocity_type > x)
  {
    this->velocity_.set (x);
  }

  const cuboid_t::dimensions_type& cuboid_t::
  dimensions () const
  {
    return this->dimensions_.get ();
  }

  cuboid_t::dimensions_type& cuboid_t::
  dimensions ()
  {
    return this->dimensions_.get ();
  }

  void cuboid_t::
  dimensions (const dimensions_type& x)
  {
    this->dimensions_.set (x);
  }

  void cuboid_t::
  dimensions (::std::auto_ptr< dimensions_type > x)
  {
    this->dimensions_.set (x);
  }

  const cuboid_t::mass_type& cuboid_t::
  mass () const
  {
    return this->mass_.get ();
  }

  cuboid_t::mass_type& cuboid_t::
  mass ()
  {
    return this->mass_.get ();
  }

  void cuboid_t::
  mass (const mass_type& x)
  {
    this->mass_.set (x);
  }

  void cuboid_t::
  mass (::std::auto_ptr< mass_type > x)
  {
    this->mass_.set (x);
  }

  const cuboid_t::distance_type& cuboid_t::
  distance () const
  {
    return this->distance_.get ();
  }

  cuboid_t::distance_type& cuboid_t::
  distance ()
  {
    return this->distance_.get ();
  }

  void cuboid_t::
  distance (const distance_type& x)
  {
    this->distance_.set (x);
  }

  void cuboid_t::
  distance (::std::auto_ptr< distance_type > x)
  {
    this->distance_.set (x);
  }

  const cuboid_t::sigma_type& cuboid_t::
  sigma () const
  {
    return this->sigma_.get ();
  }

  cuboid_t::sigma_type& cuboid_t::
  sigma ()
  {
    return this->sigma_.get ();
  }

  void cuboid_t::
  sigma (const sigma_type& x)
  {
    this->sigma_.set (x);
  }

  const cuboid_t::epsilon_type& cuboid_t::
  epsilon () const
  {
    return this->epsilon_.get ();
  }

  cuboid_t::epsilon_type& cuboid_t::
  epsilon ()
  {
    return this->epsilon_.get ();
  }

  void cuboid_t::
  epsilon (const epsilon_type& x)
  {
    this->epsilon_.set (x);
  }

  const cuboid_t::type_type& cuboid_t::
  type () const
  {
    return this->type_.get ();
  }

  cuboid_t::type_type& cuboid_t::
  type ()
  {
    return this->type_.get ();
  }

  void cuboid_t::
  type (const type_type& x)
  {
    this->type_.set (x);
  }


  // sphere_t
  // 

  const sphere_t::position_type& sphere_t::
  position () const
  {
    return this->position_.get ();
  }

  sphere_t::position_type& sphere_t::
  position ()
  {
    return this->position_.get ();
  }

  void sphere_t::
  position (const position_type& x)
  {
    this->position_.set (x);
  }

  void sphere_t::
  position (::std::auto_ptr< position_type > x)
  {
    this->position_.set (x);
  }

  const sphere_t::velocity_type& sphere_t::
  velocity () const
  {
    return this->velocity_.get ();
  }

  sphere_t::velocity_type& sphere_t::
  velocity ()
  {
    return this->velocity_.get ();
  }

  void sphere_t::
  velocity (const velocity_type& x)
  {
    this->velocity_.set (x);
  }

  void sphere_t::
  velocity (::std::auto_ptr< velocity_type > x)
  {
    this->velocity_.set (x);
  }

  const sphere_t::radiusDimension_type& sphere_t::
  radiusDimension () const
  {
    return this->radiusDimension_.get ();
  }

  sphere_t::radiusDimension_type& sphere_t::
  radiusDimension ()
  {
    return this->radiusDimension_.get ();
  }

  void sphere_t::
  radiusDimension (const radiusDimension_type& x)
  {
    this->radiusDimension_.set (x);
  }

  const sphere_t::mass_type& sphere_t::
  mass () const
  {
    return this->mass_.get ();
  }

  sphere_t::mass_type& sphere_t::
  mass ()
  {
    return this->mass_.get ();
  }

  void sphere_t::
  mass (const mass_type& x)
  {
    this->mass_.set (x);
  }

  void sphere_t::
  mass (::std::auto_ptr< mass_type > x)
  {
    this->mass_.set (x);
  }

  const sphere_t::distance_type& sphere_t::
  distance () const
  {
    return this->distance_.get ();
  }

  sphere_t::distance_type& sphere_t::
  distance ()
  {
    return this->distance_.get ();
  }

  void sphere_t::
  distance (const distance_type& x)
  {
    this->distance_.set (x);
  }

  void sphere_t::
  distance (::std::auto_ptr< distance_type > x)
  {
    this->distance_.set (x);
  }

  const sphere_t::sigma_type& sphere_t::
  sigma () const
  {
    return this->sigma_.get ();
  }

  sphere_t::sigma_type& sphere_t::
  sigma ()
  {
    return this->sigma_.get ();
  }

  void sphere_t::
  sigma (const sigma_type& x)
  {
    this->sigma_.set (x);
  }

  const sphere_t::epsilon_type& sphere_t::
  epsilon () const
  {
    return this->epsilon_.get ();
  }

  sphere_t::epsilon_type& sphere_t::
  epsilon ()
  {
    return this->epsilon_.get ();
  }

  void sphere_t::
  epsilon (const epsilon_type& x)
  {
    this->epsilon_.set (x);
  }

  const sphere_t::type_type& sphere_t::
  type () const
  {
    return this->type_.get ();
  }

  sphere_t::type_type& sphere_t::
  type ()
  {
    return this->type_.get ();
  }

  void sphere_t::
  type (const type_type& x)
  {
    this->type_.set (x);
  }


  // inputs_t
  // 

  const inputs_t::inputFile_sequence& inputs_t::
  inputFile () const
  {
    return this->inputFile_;
  }

  inputs_t::inputFile_sequence& inputs_t::
  inputFile ()
  {
    return this->inputFile_;
  }

  void inputs_t::
  inputFile (const inputFile_sequence& s)
  {
    this->inputFile_ = s;
  }

  const inputs_t::cuboid_sequence& inputs_t::
  cuboid () const
  {
    return this->cuboid_;
  }

  inputs_t::cuboid_sequence& inputs_t::
  cuboid ()
  {
    return this->cuboid_;
  }

  void inputs_t::
  cuboid (const cuboid_sequence& s)
  {
    this->cuboid_ = s;
  }

  const inputs_t::sphere_sequence& inputs_t::
  sphere () const
  {
    return this->sphere_;
  }

  inputs_t::sphere_sequence& inputs_t::
  sphere ()
  {
    return this->sphere_;
  }

  void inputs_t::
  sphere (const sphere_sequence& s)
  {
    this->sphere_ = s;
  }


  // potential_t
  // 

  potential_t::
  potential_t (value v)
  : ::xml_schema::string (_xsd_potential_t_literals_[v])
  {
  }

  potential_t::
  potential_t (const char* v)
  : ::xml_schema::string (v)
  {
  }

  potential_t::
  potential_t (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  potential_t::
  potential_t (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  potential_t::
  potential_t (const potential_t& v,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  potential_t& potential_t::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_potential_t_literals_[v]);

    return *this;
  }


  // boundary_t
  // 

  boundary_t::
  boundary_t (value v)
  : ::xml_schema::string (_xsd_boundary_t_literals_[v])
  {
  }

  boundary_t::
  boundary_t (const char* v)
  : ::xml_schema::string (v)
  {
  }

  boundary_t::
  boundary_t (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  boundary_t::
  boundary_t (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  boundary_t::
  boundary_t (const boundary_t& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  boundary_t& boundary_t::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_boundary_t_literals_[v]);

    return *this;
  }


  // domain_t
  // 

  const domain_t::dimensions_type& domain_t::
  dimensions () const
  {
    return this->dimensions_.get ();
  }

  domain_t::dimensions_type& domain_t::
  dimensions ()
  {
    return this->dimensions_.get ();
  }

  void domain_t::
  dimensions (const dimensions_type& x)
  {
    this->dimensions_.set (x);
  }

  void domain_t::
  dimensions (::std::auto_ptr< dimensions_type > x)
  {
    this->dimensions_.set (x);
  }

  const domain_t::boundary_type& domain_t::
  boundary () const
  {
    return this->boundary_.get ();
  }

  domain_t::boundary_type& domain_t::
  boundary ()
  {
    return this->boundary_.get ();
  }

  void domain_t::
  boundary (const boundary_type& x)
  {
    this->boundary_.set (x);
  }

  void domain_t::
  boundary (::std::auto_ptr< boundary_type > x)
  {
    this->boundary_.set (x);
  }

  const domain_t::cutoff_type& domain_t::
  cutoff () const
  {
    return this->cutoff_.get ();
  }

  domain_t::cutoff_type& domain_t::
  cutoff ()
  {
    return this->cutoff_.get ();
  }

  void domain_t::
  cutoff (const cutoff_type& x)
  {
    this->cutoff_.set (x);
  }

  void domain_t::
  cutoff (::std::auto_ptr< cutoff_type > x)
  {
    this->cutoff_.set (x);
  }


  // brownianMotion_t
  // 

  const brownianMotion_t::meanVelocity_type& brownianMotion_t::
  meanVelocity () const
  {
    return this->meanVelocity_.get ();
  }

  brownianMotion_t::meanVelocity_type& brownianMotion_t::
  meanVelocity ()
  {
    return this->meanVelocity_.get ();
  }

  void brownianMotion_t::
  meanVelocity (const meanVelocity_type& x)
  {
    this->meanVelocity_.set (x);
  }

  void brownianMotion_t::
  meanVelocity (::std::auto_ptr< meanVelocity_type > x)
  {
    this->meanVelocity_.set (x);
  }


  // thermostat_t
  // 

  const thermostat_t::initialT_type& thermostat_t::
  initialT () const
  {
    return this->initialT_.get ();
  }

  thermostat_t::initialT_type& thermostat_t::
  initialT ()
  {
    return this->initialT_.get ();
  }

  void thermostat_t::
  initialT (const initialT_type& x)
  {
    this->initialT_.set (x);
  }

  void thermostat_t::
  initialT (::std::auto_ptr< initialT_type > x)
  {
    this->initialT_.set (x);
  }

  const thermostat_t::nThermostat_type& thermostat_t::
  nThermostat () const
  {
    return this->nThermostat_.get ();
  }

  thermostat_t::nThermostat_type& thermostat_t::
  nThermostat ()
  {
    return this->nThermostat_.get ();
  }

  void thermostat_t::
  nThermostat (const nThermostat_type& x)
  {
    this->nThermostat_.set (x);
  }

  const thermostat_t::targetT_type& thermostat_t::
  targetT () const
  {
    return this->targetT_.get ();
  }

  thermostat_t::targetT_type& thermostat_t::
  targetT ()
  {
    return this->targetT_.get ();
  }

  void thermostat_t::
  targetT (const targetT_type& x)
  {
    this->targetT_.set (x);
  }

  void thermostat_t::
  targetT (::std::auto_ptr< targetT_type > x)
  {
    this->targetT_.set (x);
  }

  const thermostat_t::diffT_type& thermostat_t::
  diffT () const
  {
    return this->diffT_.get ();
  }

  thermostat_t::diffT_type& thermostat_t::
  diffT ()
  {
    return this->diffT_.get ();
  }

  void thermostat_t::
  diffT (const diffT_type& x)
  {
    this->diffT_.set (x);
  }

  void thermostat_t::
  diffT (::std::auto_ptr< diffT_type > x)
  {
    this->diffT_.set (x);
  }

  const thermostat_t::nMax_type& thermostat_t::
  nMax () const
  {
    return this->nMax_.get ();
  }

  thermostat_t::nMax_type& thermostat_t::
  nMax ()
  {
    return this->nMax_.get ();
  }

  void thermostat_t::
  nMax (const nMax_type& x)
  {
    this->nMax_.set (x);
  }


  // simulation_t
  // 

  const simulation_t::outputFile_type& simulation_t::
  outputFile () const
  {
    return this->outputFile_.get ();
  }

  simulation_t::outputFile_type& simulation_t::
  outputFile ()
  {
    return this->outputFile_.get ();
  }

  void simulation_t::
  outputFile (const outputFile_type& x)
  {
    this->outputFile_.set (x);
  }

  void simulation_t::
  outputFile (::std::auto_ptr< outputFile_type > x)
  {
    this->outputFile_.set (x);
  }

  const simulation_t::inputs_type& simulation_t::
  inputs () const
  {
    return this->inputs_.get ();
  }

  simulation_t::inputs_type& simulation_t::
  inputs ()
  {
    return this->inputs_.get ();
  }

  void simulation_t::
  inputs (const inputs_type& x)
  {
    this->inputs_.set (x);
  }

  void simulation_t::
  inputs (::std::auto_ptr< inputs_type > x)
  {
    this->inputs_.set (x);
  }

  const simulation_t::writeFrequency_type& simulation_t::
  writeFrequency () const
  {
    return this->writeFrequency_.get ();
  }

  simulation_t::writeFrequency_type& simulation_t::
  writeFrequency ()
  {
    return this->writeFrequency_.get ();
  }

  void simulation_t::
  writeFrequency (const writeFrequency_type& x)
  {
    this->writeFrequency_.set (x);
  }

  const simulation_t::t_end_type& simulation_t::
  t_end () const
  {
    return this->t_end_.get ();
  }

  simulation_t::t_end_type& simulation_t::
  t_end ()
  {
    return this->t_end_.get ();
  }

  void simulation_t::
  t_end (const t_end_type& x)
  {
    this->t_end_.set (x);
  }

  void simulation_t::
  t_end (::std::auto_ptr< t_end_type > x)
  {
    this->t_end_.set (x);
  }

  const simulation_t::delta_t_type& simulation_t::
  delta_t () const
  {
    return this->delta_t_.get ();
  }

  simulation_t::delta_t_type& simulation_t::
  delta_t ()
  {
    return this->delta_t_.get ();
  }

  void simulation_t::
  delta_t (const delta_t_type& x)
  {
    this->delta_t_.set (x);
  }

  void simulation_t::
  delta_t (::std::auto_ptr< delta_t_type > x)
  {
    this->delta_t_.set (x);
  }

  const simulation_t::potential_type& simulation_t::
  potential () const
  {
    return this->potential_.get ();
  }

  simulation_t::potential_type& simulation_t::
  potential ()
  {
    return this->potential_.get ();
  }

  void simulation_t::
  potential (const potential_type& x)
  {
    this->potential_.set (x);
  }

  void simulation_t::
  potential (::std::auto_ptr< potential_type > x)
  {
    this->potential_.set (x);
  }

  const simulation_t::domain_optional& simulation_t::
  domain () const
  {
    return this->domain_;
  }

  simulation_t::domain_optional& simulation_t::
  domain ()
  {
    return this->domain_;
  }

  void simulation_t::
  domain (const domain_type& x)
  {
    this->domain_.set (x);
  }

  void simulation_t::
  domain (const domain_optional& x)
  {
    this->domain_ = x;
  }

  void simulation_t::
  domain (::std::auto_ptr< domain_type > x)
  {
    this->domain_.set (x);
  }

  const simulation_t::brownianMotion_optional& simulation_t::
  brownianMotion () const
  {
    return this->brownianMotion_;
  }

  simulation_t::brownianMotion_optional& simulation_t::
  brownianMotion ()
  {
    return this->brownianMotion_;
  }

  void simulation_t::
  brownianMotion (const brownianMotion_type& x)
  {
    this->brownianMotion_.set (x);
  }

  void simulation_t::
  brownianMotion (const brownianMotion_optional& x)
  {
    this->brownianMotion_ = x;
  }

  void simulation_t::
  brownianMotion (::std::auto_ptr< brownianMotion_type > x)
  {
    this->brownianMotion_.set (x);
  }

  const simulation_t::thermostat_optional& simulation_t::
  thermostat () const
  {
    return this->thermostat_;
  }

  simulation_t::thermostat_optional& simulation_t::
  thermostat ()
  {
    return this->thermostat_;
  }

  void simulation_t::
  thermostat (const thermostat_type& x)
  {
    this->thermostat_.set (x);
  }

  void simulation_t::
  thermostat (const thermostat_optional& x)
  {
    this->thermostat_ = x;
  }

  void simulation_t::
  thermostat (::std::auto_ptr< thermostat_type > x)
  {
    this->thermostat_.set (x);
  }

  const simulation_t::dimensionCount_type& simulation_t::
  dimensionCount () const
  {
    return this->dimensionCount_.get ();
  }

  simulation_t::dimensionCount_type& simulation_t::
  dimensionCount ()
  {
    return this->dimensionCount_.get ();
  }

  void simulation_t::
  dimensionCount (const dimensionCount_type& x)
  {
    this->dimensionCount_.set (x);
  }

  void simulation_t::
  dimensionCount (::std::auto_ptr< dimensionCount_type > x)
  {
    this->dimensionCount_.set (x);
  }

  const simulation_t::gravitation_optional& simulation_t::
  gravitation () const
  {
    return this->gravitation_;
  }

  simulation_t::gravitation_optional& simulation_t::
  gravitation ()
  {
    return this->gravitation_;
  }

  void simulation_t::
  gravitation (const gravitation_type& x)
  {
    this->gravitation_.set (x);
  }

  void simulation_t::
  gravitation (const gravitation_optional& x)
  {
    this->gravitation_ = x;
  }

  void simulation_t::
  gravitation (::std::auto_ptr< gravitation_type > x)
  {
    this->gravitation_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace PSE_Molekulardynamik_WS12
{
  // nonEmptyString_t
  //

  nonEmptyString_t::
  nonEmptyString_t ()
  : ::xml_schema::string ()
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const nonEmptyString_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  nonEmptyString_t::
  nonEmptyString_t (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  nonEmptyString_t* nonEmptyString_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class nonEmptyString_t (*this, f, c);
  }

  nonEmptyString_t::
  ~nonEmptyString_t ()
  {
  }

  // positiveDecimal_t
  //

  positiveDecimal_t::
  positiveDecimal_t (const ::xml_schema::decimal& _xsd_decimal_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (_xsd_decimal_base)
  {
  }

  positiveDecimal_t::
  positiveDecimal_t (const positiveDecimal_t& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (x, f, c)
  {
  }

  positiveDecimal_t::
  positiveDecimal_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (e, f, c)
  {
  }

  positiveDecimal_t::
  positiveDecimal_t (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (a, f, c)
  {
  }

  positiveDecimal_t::
  positiveDecimal_t (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (s, e, f, c)
  {
  }

  positiveDecimal_t* positiveDecimal_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class positiveDecimal_t (*this, f, c);
  }

  positiveDecimal_t::
  ~positiveDecimal_t ()
  {
  }

  // nonNegativeDecimal_t
  //

  nonNegativeDecimal_t::
  nonNegativeDecimal_t (const ::xml_schema::decimal& _xsd_decimal_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (_xsd_decimal_base)
  {
  }

  nonNegativeDecimal_t::
  nonNegativeDecimal_t (const nonNegativeDecimal_t& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (x, f, c)
  {
  }

  nonNegativeDecimal_t::
  nonNegativeDecimal_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (e, f, c)
  {
  }

  nonNegativeDecimal_t::
  nonNegativeDecimal_t (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (a, f, c)
  {
  }

  nonNegativeDecimal_t::
  nonNegativeDecimal_t (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal > (s, e, f, c)
  {
  }

  nonNegativeDecimal_t* nonNegativeDecimal_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class nonNegativeDecimal_t (*this, f, c);
  }

  nonNegativeDecimal_t::
  ~nonNegativeDecimal_t ()
  {
  }

  // dimensionCount_t
  //

  dimensionCount_t::
  dimensionCount_t (const ::xml_schema::positive_integer& _xsd_positive_integer_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (_xsd_positive_integer_base)
  {
  }

  dimensionCount_t::
  dimensionCount_t (const dimensionCount_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  dimensionCount_t::
  dimensionCount_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  dimensionCount_t::
  dimensionCount_t (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (a, f, c)
  {
  }

  dimensionCount_t::
  dimensionCount_t (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  dimensionCount_t* dimensionCount_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class dimensionCount_t (*this, f, c);
  }

  dimensionCount_t::
  ~dimensionCount_t ()
  {
  }

  // positiveDecimalVector_t
  //

  positiveDecimalVector_t::
  positiveDecimalVector_t (const x_type& x,
                           const y_type& y,
                           const z_type& z)
  : ::xml_schema::type (),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    z_ (z, ::xml_schema::flags (), this)
  {
  }

  positiveDecimalVector_t::
  positiveDecimalVector_t (const positiveDecimalVector_t& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  positiveDecimalVector_t::
  positiveDecimalVector_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (f, this),
    y_ (f, this),
    z_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void positiveDecimalVector_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // x
      //
      if (n.name () == "x" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< x_type > r (
          x_traits::create (i, f, this));

        if (!x_.present ())
        {
          this->x_.set (r);
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< y_type > r (
          y_traits::create (i, f, this));

        if (!y_.present ())
        {
          this->y_.set (r);
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< z_type > r (
          z_traits::create (i, f, this));

        if (!z_.present ())
        {
          this->z_.set (r);
          continue;
        }
      }

      break;
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  positiveDecimalVector_t* positiveDecimalVector_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class positiveDecimalVector_t (*this, f, c);
  }

  positiveDecimalVector_t::
  ~positiveDecimalVector_t ()
  {
  }

  // decimalVector_t
  //

  decimalVector_t::
  decimalVector_t (const x_type& x,
                   const y_type& y,
                   const z_type& z)
  : ::xml_schema::type (),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    z_ (z, ::xml_schema::flags (), this)
  {
  }

  decimalVector_t::
  decimalVector_t (const decimalVector_t& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  decimalVector_t::
  decimalVector_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (f, this),
    y_ (f, this),
    z_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void decimalVector_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // x
      //
      if (n.name () == "x" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!x_.present ())
        {
          this->x_.set (x_traits::create (i, f, this));
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!y_.present ())
        {
          this->y_.set (y_traits::create (i, f, this));
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!z_.present ())
        {
          this->z_.set (z_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  decimalVector_t* decimalVector_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class decimalVector_t (*this, f, c);
  }

  decimalVector_t::
  ~decimalVector_t ()
  {
  }

  // positiveIntegerVector_t
  //

  positiveIntegerVector_t::
  positiveIntegerVector_t (const x_type& x,
                           const y_type& y,
                           const z_type& z)
  : ::xml_schema::type (),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    z_ (z, ::xml_schema::flags (), this)
  {
  }

  positiveIntegerVector_t::
  positiveIntegerVector_t (const positiveIntegerVector_t& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  positiveIntegerVector_t::
  positiveIntegerVector_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (f, this),
    y_ (f, this),
    z_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void positiveIntegerVector_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // x
      //
      if (n.name () == "x" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< x_type > r (
          x_traits::create (i, f, this));

        if (!x_.present ())
        {
          this->x_.set (r);
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< y_type > r (
          y_traits::create (i, f, this));

        if (!y_.present ())
        {
          this->y_.set (r);
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< z_type > r (
          z_traits::create (i, f, this));

        if (!z_.present ())
        {
          this->z_.set (r);
          continue;
        }
      }

      break;
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  positiveIntegerVector_t* positiveIntegerVector_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class positiveIntegerVector_t (*this, f, c);
  }

  positiveIntegerVector_t::
  ~positiveIntegerVector_t ()
  {
  }

  // nonNegativeIntegerVector_t
  //

  nonNegativeIntegerVector_t::
  nonNegativeIntegerVector_t (const x_type& x,
                              const y_type& y,
                              const z_type& z)
  : ::xml_schema::type (),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    z_ (z, ::xml_schema::flags (), this)
  {
  }

  nonNegativeIntegerVector_t::
  nonNegativeIntegerVector_t (const nonNegativeIntegerVector_t& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this)
  {
  }

  nonNegativeIntegerVector_t::
  nonNegativeIntegerVector_t (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    x_ (f, this),
    y_ (f, this),
    z_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void nonNegativeIntegerVector_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // x
      //
      if (n.name () == "x" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< x_type > r (
          x_traits::create (i, f, this));

        if (!x_.present ())
        {
          this->x_.set (r);
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< y_type > r (
          y_traits::create (i, f, this));

        if (!y_.present ())
        {
          this->y_.set (r);
          continue;
        }
      }

      // z
      //
      if (n.name () == "z" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< z_type > r (
          z_traits::create (i, f, this));

        if (!z_.present ())
        {
          this->z_.set (r);
          continue;
        }
      }

      break;
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "z",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  nonNegativeIntegerVector_t* nonNegativeIntegerVector_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class nonNegativeIntegerVector_t (*this, f, c);
  }

  nonNegativeIntegerVector_t::
  ~nonNegativeIntegerVector_t ()
  {
  }

  // inputType_t
  //

  inputType_t::
  inputType_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_inputType_t_convert ();
  }

  inputType_t::
  inputType_t (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_inputType_t_convert ();
  }

  inputType_t::
  inputType_t (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_inputType_t_convert ();
  }

  inputType_t* inputType_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class inputType_t (*this, f, c);
  }

  inputType_t::value inputType_t::
  _xsd_inputType_t_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_inputType_t_literals_);
    const value* i (::std::lower_bound (
                      _xsd_inputType_t_indexes_,
                      _xsd_inputType_t_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_inputType_t_indexes_ + 2 || _xsd_inputType_t_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const inputType_t::
  _xsd_inputType_t_literals_[2] =
  {
    "list",
    "cuboid"
  };

  const inputType_t::value inputType_t::
  _xsd_inputType_t_indexes_[2] =
  {
    ::PSE_Molekulardynamik_WS12::inputType_t::cuboid,
    ::PSE_Molekulardynamik_WS12::inputType_t::list
  };

  // inputFile_t
  //

  inputFile_t::
  inputFile_t (const type_type& type)
  : ::PSE_Molekulardynamik_WS12::nonEmptyString_t (),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  inputFile_t::
  inputFile_t (const char* _xsd_string_base,
               const type_type& type)
  : ::PSE_Molekulardynamik_WS12::nonEmptyString_t (_xsd_string_base),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  inputFile_t::
  inputFile_t (const ::std::string& _xsd_string_base,
               const type_type& type)
  : ::PSE_Molekulardynamik_WS12::nonEmptyString_t (_xsd_string_base),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  inputFile_t::
  inputFile_t (const ::xml_schema::string& _xsd_string_base,
               const type_type& type)
  : ::PSE_Molekulardynamik_WS12::nonEmptyString_t (_xsd_string_base),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  inputFile_t::
  inputFile_t (const inputFile_t& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::PSE_Molekulardynamik_WS12::nonEmptyString_t (x, f, c),
    type_ (x.type_, f, this)
  {
  }

  inputFile_t::
  inputFile_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::PSE_Molekulardynamik_WS12::nonEmptyString_t (e, f | ::xml_schema::flags::base, c),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void inputFile_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        this->type_.set (r);
        continue;
      }
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "type",
        "");
    }
  }

  inputFile_t* inputFile_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class inputFile_t (*this, f, c);
  }

  inputFile_t::
  ~inputFile_t ()
  {
  }

  // cuboid_t
  //

  cuboid_t::
  cuboid_t (const position_type& position,
            const velocity_type& velocity,
            const dimensions_type& dimensions,
            const mass_type& mass,
            const distance_type& distance,
            const sigma_type& sigma,
            const epsilon_type& epsilon,
            const type_type& type)
  : ::xml_schema::type (),
    position_ (position, ::xml_schema::flags (), this),
    velocity_ (velocity, ::xml_schema::flags (), this),
    dimensions_ (dimensions, ::xml_schema::flags (), this),
    mass_ (mass, ::xml_schema::flags (), this),
    distance_ (distance, ::xml_schema::flags (), this),
    sigma_ (sigma, ::xml_schema::flags (), this),
    epsilon_ (epsilon, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  cuboid_t::
  cuboid_t (::std::auto_ptr< position_type >& position,
            ::std::auto_ptr< velocity_type >& velocity,
            ::std::auto_ptr< dimensions_type >& dimensions,
            const mass_type& mass,
            const distance_type& distance,
            const sigma_type& sigma,
            const epsilon_type& epsilon,
            const type_type& type)
  : ::xml_schema::type (),
    position_ (position, ::xml_schema::flags (), this),
    velocity_ (velocity, ::xml_schema::flags (), this),
    dimensions_ (dimensions, ::xml_schema::flags (), this),
    mass_ (mass, ::xml_schema::flags (), this),
    distance_ (distance, ::xml_schema::flags (), this),
    sigma_ (sigma, ::xml_schema::flags (), this),
    epsilon_ (epsilon, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  cuboid_t::
  cuboid_t (const cuboid_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    position_ (x.position_, f, this),
    velocity_ (x.velocity_, f, this),
    dimensions_ (x.dimensions_, f, this),
    mass_ (x.mass_, f, this),
    distance_ (x.distance_, f, this),
    sigma_ (x.sigma_, f, this),
    epsilon_ (x.epsilon_, f, this),
    type_ (x.type_, f, this)
  {
  }

  cuboid_t::
  cuboid_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    position_ (f, this),
    velocity_ (f, this),
    dimensions_ (f, this),
    mass_ (f, this),
    distance_ (f, this),
    sigma_ (f, this),
    epsilon_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void cuboid_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< position_type > r (
          position_traits::create (i, f, this));

        if (!position_.present ())
        {
          this->position_.set (r);
          continue;
        }
      }

      // velocity
      //
      if (n.name () == "velocity" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< velocity_type > r (
          velocity_traits::create (i, f, this));

        if (!velocity_.present ())
        {
          this->velocity_.set (r);
          continue;
        }
      }

      // dimensions
      //
      if (n.name () == "dimensions" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< dimensions_type > r (
          dimensions_traits::create (i, f, this));

        if (!dimensions_.present ())
        {
          this->dimensions_.set (r);
          continue;
        }
      }

      // mass
      //
      if (n.name () == "mass" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< mass_type > r (
          mass_traits::create (i, f, this));

        if (!mass_.present ())
        {
          this->mass_.set (r);
          continue;
        }
      }

      // distance
      //
      if (n.name () == "distance" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< distance_type > r (
          distance_traits::create (i, f, this));

        if (!distance_.present ())
        {
          this->distance_.set (r);
          continue;
        }
      }

      // sigma
      //
      if (n.name () == "sigma" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!sigma_.present ())
        {
          this->sigma_.set (sigma_traits::create (i, f, this));
          continue;
        }
      }

      // epsilon
      //
      if (n.name () == "epsilon" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!epsilon_.present ())
        {
          this->epsilon_.set (epsilon_traits::create (i, f, this));
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!type_.present ())
        {
          this->type_.set (type_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!position_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "position",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!velocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "velocity",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!dimensions_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dimensions",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!mass_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mass",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "distance",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!sigma_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "sigma",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!epsilon_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "epsilon",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  cuboid_t* cuboid_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class cuboid_t (*this, f, c);
  }

  cuboid_t::
  ~cuboid_t ()
  {
  }

  // sphere_t
  //

  sphere_t::
  sphere_t (const position_type& position,
            const velocity_type& velocity,
            const radiusDimension_type& radiusDimension,
            const mass_type& mass,
            const distance_type& distance,
            const sigma_type& sigma,
            const epsilon_type& epsilon,
            const type_type& type)
  : ::xml_schema::type (),
    position_ (position, ::xml_schema::flags (), this),
    velocity_ (velocity, ::xml_schema::flags (), this),
    radiusDimension_ (radiusDimension, ::xml_schema::flags (), this),
    mass_ (mass, ::xml_schema::flags (), this),
    distance_ (distance, ::xml_schema::flags (), this),
    sigma_ (sigma, ::xml_schema::flags (), this),
    epsilon_ (epsilon, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  sphere_t::
  sphere_t (::std::auto_ptr< position_type >& position,
            ::std::auto_ptr< velocity_type >& velocity,
            const radiusDimension_type& radiusDimension,
            const mass_type& mass,
            const distance_type& distance,
            const sigma_type& sigma,
            const epsilon_type& epsilon,
            const type_type& type)
  : ::xml_schema::type (),
    position_ (position, ::xml_schema::flags (), this),
    velocity_ (velocity, ::xml_schema::flags (), this),
    radiusDimension_ (radiusDimension, ::xml_schema::flags (), this),
    mass_ (mass, ::xml_schema::flags (), this),
    distance_ (distance, ::xml_schema::flags (), this),
    sigma_ (sigma, ::xml_schema::flags (), this),
    epsilon_ (epsilon, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  sphere_t::
  sphere_t (const sphere_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    position_ (x.position_, f, this),
    velocity_ (x.velocity_, f, this),
    radiusDimension_ (x.radiusDimension_, f, this),
    mass_ (x.mass_, f, this),
    distance_ (x.distance_, f, this),
    sigma_ (x.sigma_, f, this),
    epsilon_ (x.epsilon_, f, this),
    type_ (x.type_, f, this)
  {
  }

  sphere_t::
  sphere_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    position_ (f, this),
    velocity_ (f, this),
    radiusDimension_ (f, this),
    mass_ (f, this),
    distance_ (f, this),
    sigma_ (f, this),
    epsilon_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void sphere_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< position_type > r (
          position_traits::create (i, f, this));

        if (!position_.present ())
        {
          this->position_.set (r);
          continue;
        }
      }

      // velocity
      //
      if (n.name () == "velocity" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< velocity_type > r (
          velocity_traits::create (i, f, this));

        if (!velocity_.present ())
        {
          this->velocity_.set (r);
          continue;
        }
      }

      // radiusDimension
      //
      if (n.name () == "radiusDimension" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!radiusDimension_.present ())
        {
          this->radiusDimension_.set (radiusDimension_traits::create (i, f, this));
          continue;
        }
      }

      // mass
      //
      if (n.name () == "mass" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< mass_type > r (
          mass_traits::create (i, f, this));

        if (!mass_.present ())
        {
          this->mass_.set (r);
          continue;
        }
      }

      // distance
      //
      if (n.name () == "distance" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< distance_type > r (
          distance_traits::create (i, f, this));

        if (!distance_.present ())
        {
          this->distance_.set (r);
          continue;
        }
      }

      // sigma
      //
      if (n.name () == "sigma" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!sigma_.present ())
        {
          this->sigma_.set (sigma_traits::create (i, f, this));
          continue;
        }
      }

      // epsilon
      //
      if (n.name () == "epsilon" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!epsilon_.present ())
        {
          this->epsilon_.set (epsilon_traits::create (i, f, this));
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!type_.present ())
        {
          this->type_.set (type_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!position_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "position",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!velocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "velocity",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!radiusDimension_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "radiusDimension",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!mass_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mass",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "distance",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!sigma_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "sigma",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!epsilon_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "epsilon",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  sphere_t* sphere_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class sphere_t (*this, f, c);
  }

  sphere_t::
  ~sphere_t ()
  {
  }

  // inputs_t
  //

  inputs_t::
  inputs_t ()
  : ::xml_schema::type (),
    inputFile_ (::xml_schema::flags (), this),
    cuboid_ (::xml_schema::flags (), this),
    sphere_ (::xml_schema::flags (), this)
  {
  }

  inputs_t::
  inputs_t (const inputs_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    inputFile_ (x.inputFile_, f, this),
    cuboid_ (x.cuboid_, f, this),
    sphere_ (x.sphere_, f, this)
  {
  }

  inputs_t::
  inputs_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    inputFile_ (f, this),
    cuboid_ (f, this),
    sphere_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void inputs_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // inputFile
      //
      if (n.name () == "inputFile" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< inputFile_type > r (
          inputFile_traits::create (i, f, this));

        this->inputFile_.push_back (r);
        continue;
      }

      // cuboid
      //
      if (n.name () == "cuboid" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< cuboid_type > r (
          cuboid_traits::create (i, f, this));

        this->cuboid_.push_back (r);
        continue;
      }

      // sphere
      //
      if (n.name () == "sphere" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< sphere_type > r (
          sphere_traits::create (i, f, this));

        this->sphere_.push_back (r);
        continue;
      }

      break;
    }
  }

  inputs_t* inputs_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class inputs_t (*this, f, c);
  }

  inputs_t::
  ~inputs_t ()
  {
  }

  // potential_t
  //

  potential_t::
  potential_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_potential_t_convert ();
  }

  potential_t::
  potential_t (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_potential_t_convert ();
  }

  potential_t::
  potential_t (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_potential_t_convert ();
  }

  potential_t* potential_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class potential_t (*this, f, c);
  }

  potential_t::value potential_t::
  _xsd_potential_t_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_potential_t_literals_);
    const value* i (::std::lower_bound (
                      _xsd_potential_t_indexes_,
                      _xsd_potential_t_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_potential_t_indexes_ + 2 || _xsd_potential_t_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const potential_t::
  _xsd_potential_t_literals_[2] =
  {
    "gravitational",
    "lenard jones"
  };

  const potential_t::value potential_t::
  _xsd_potential_t_indexes_[2] =
  {
    ::PSE_Molekulardynamik_WS12::potential_t::gravitational,
    ::PSE_Molekulardynamik_WS12::potential_t::lenard_jones
  };

  // boundary_t
  //

  boundary_t::
  boundary_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_boundary_t_convert ();
  }

  boundary_t::
  boundary_t (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_boundary_t_convert ();
  }

  boundary_t::
  boundary_t (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_boundary_t_convert ();
  }

  boundary_t* boundary_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class boundary_t (*this, f, c);
  }

  boundary_t::value boundary_t::
  _xsd_boundary_t_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_boundary_t_literals_);
    const value* i (::std::lower_bound (
                      _xsd_boundary_t_indexes_,
                      _xsd_boundary_t_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_boundary_t_indexes_ + 3 || _xsd_boundary_t_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const boundary_t::
  _xsd_boundary_t_literals_[3] =
  {
    "outflow",
    "reflecting",
    "periodic"
  };

  const boundary_t::value boundary_t::
  _xsd_boundary_t_indexes_[3] =
  {
    ::PSE_Molekulardynamik_WS12::boundary_t::outflow,
    ::PSE_Molekulardynamik_WS12::boundary_t::periodic,
    ::PSE_Molekulardynamik_WS12::boundary_t::reflecting
  };

  // domain_t
  //

  domain_t::
  domain_t (const dimensions_type& dimensions,
            const boundary_type& boundary,
            const cutoff_type& cutoff)
  : ::xml_schema::type (),
    dimensions_ (dimensions, ::xml_schema::flags (), this),
    boundary_ (boundary, ::xml_schema::flags (), this),
    cutoff_ (cutoff, ::xml_schema::flags (), this)
  {
  }

  domain_t::
  domain_t (::std::auto_ptr< dimensions_type >& dimensions,
            const boundary_type& boundary,
            const cutoff_type& cutoff)
  : ::xml_schema::type (),
    dimensions_ (dimensions, ::xml_schema::flags (), this),
    boundary_ (boundary, ::xml_schema::flags (), this),
    cutoff_ (cutoff, ::xml_schema::flags (), this)
  {
  }

  domain_t::
  domain_t (const domain_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dimensions_ (x.dimensions_, f, this),
    boundary_ (x.boundary_, f, this),
    cutoff_ (x.cutoff_, f, this)
  {
  }

  domain_t::
  domain_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dimensions_ (f, this),
    boundary_ (f, this),
    cutoff_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void domain_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // dimensions
      //
      if (n.name () == "dimensions" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< dimensions_type > r (
          dimensions_traits::create (i, f, this));

        if (!dimensions_.present ())
        {
          this->dimensions_.set (r);
          continue;
        }
      }

      // boundary
      //
      if (n.name () == "boundary" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< boundary_type > r (
          boundary_traits::create (i, f, this));

        if (!boundary_.present ())
        {
          this->boundary_.set (r);
          continue;
        }
      }

      // cutoff
      //
      if (n.name () == "cutoff" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< cutoff_type > r (
          cutoff_traits::create (i, f, this));

        if (!cutoff_.present ())
        {
          this->cutoff_.set (r);
          continue;
        }
      }

      break;
    }

    if (!dimensions_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dimensions",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!boundary_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "boundary",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!cutoff_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "cutoff",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  domain_t* domain_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class domain_t (*this, f, c);
  }

  domain_t::
  ~domain_t ()
  {
  }

  // brownianMotion_t
  //

  brownianMotion_t::
  brownianMotion_t (const meanVelocity_type& meanVelocity)
  : ::xml_schema::type (),
    meanVelocity_ (meanVelocity, ::xml_schema::flags (), this)
  {
  }

  brownianMotion_t::
  brownianMotion_t (const brownianMotion_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    meanVelocity_ (x.meanVelocity_, f, this)
  {
  }

  brownianMotion_t::
  brownianMotion_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    meanVelocity_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void brownianMotion_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // meanVelocity
      //
      if (n.name () == "meanVelocity" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< meanVelocity_type > r (
          meanVelocity_traits::create (i, f, this));

        if (!meanVelocity_.present ())
        {
          this->meanVelocity_.set (r);
          continue;
        }
      }

      break;
    }

    if (!meanVelocity_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "meanVelocity",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  brownianMotion_t* brownianMotion_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class brownianMotion_t (*this, f, c);
  }

  brownianMotion_t::
  ~brownianMotion_t ()
  {
  }

  // thermostat_t
  //

  thermostat_t::
  thermostat_t (const initialT_type& initialT,
                const nThermostat_type& nThermostat,
                const targetT_type& targetT,
                const diffT_type& diffT,
                const nMax_type& nMax)
  : ::xml_schema::type (),
    initialT_ (initialT, ::xml_schema::flags (), this),
    nThermostat_ (nThermostat, ::xml_schema::flags (), this),
    targetT_ (targetT, ::xml_schema::flags (), this),
    diffT_ (diffT, ::xml_schema::flags (), this),
    nMax_ (nMax, ::xml_schema::flags (), this)
  {
  }

  thermostat_t::
  thermostat_t (const thermostat_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    initialT_ (x.initialT_, f, this),
    nThermostat_ (x.nThermostat_, f, this),
    targetT_ (x.targetT_, f, this),
    diffT_ (x.diffT_, f, this),
    nMax_ (x.nMax_, f, this)
  {
  }

  thermostat_t::
  thermostat_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    initialT_ (f, this),
    nThermostat_ (f, this),
    targetT_ (f, this),
    diffT_ (f, this),
    nMax_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void thermostat_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // initialT
      //
      if (n.name () == "initialT" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< initialT_type > r (
          initialT_traits::create (i, f, this));

        if (!initialT_.present ())
        {
          this->initialT_.set (r);
          continue;
        }
      }

      // nThermostat
      //
      if (n.name () == "nThermostat" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!nThermostat_.present ())
        {
          this->nThermostat_.set (nThermostat_traits::create (i, f, this));
          continue;
        }
      }

      // targetT
      //
      if (n.name () == "targetT" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< targetT_type > r (
          targetT_traits::create (i, f, this));

        if (!targetT_.present ())
        {
          this->targetT_.set (r);
          continue;
        }
      }

      // diffT
      //
      if (n.name () == "diffT" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< diffT_type > r (
          diffT_traits::create (i, f, this));

        if (!diffT_.present ())
        {
          this->diffT_.set (r);
          continue;
        }
      }

      // nMax
      //
      if (n.name () == "nMax" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!nMax_.present ())
        {
          this->nMax_.set (nMax_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!initialT_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "initialT",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!nThermostat_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "nThermostat",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!targetT_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "targetT",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!diffT_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "diffT",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!nMax_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "nMax",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  thermostat_t* thermostat_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class thermostat_t (*this, f, c);
  }

  thermostat_t::
  ~thermostat_t ()
  {
  }

  // simulation_t
  //

  simulation_t::
  simulation_t (const outputFile_type& outputFile,
                const inputs_type& inputs,
                const writeFrequency_type& writeFrequency,
                const t_end_type& t_end,
                const delta_t_type& delta_t,
                const potential_type& potential,
                const dimensionCount_type& dimensionCount)
  : ::xml_schema::type (),
    outputFile_ (outputFile, ::xml_schema::flags (), this),
    inputs_ (inputs, ::xml_schema::flags (), this),
    writeFrequency_ (writeFrequency, ::xml_schema::flags (), this),
    t_end_ (t_end, ::xml_schema::flags (), this),
    delta_t_ (delta_t, ::xml_schema::flags (), this),
    potential_ (potential, ::xml_schema::flags (), this),
    domain_ (::xml_schema::flags (), this),
    brownianMotion_ (::xml_schema::flags (), this),
    thermostat_ (::xml_schema::flags (), this),
    dimensionCount_ (dimensionCount, ::xml_schema::flags (), this),
    gravitation_ (::xml_schema::flags (), this)
  {
  }

  simulation_t::
  simulation_t (const outputFile_type& outputFile,
                ::std::auto_ptr< inputs_type >& inputs,
                const writeFrequency_type& writeFrequency,
                const t_end_type& t_end,
                const delta_t_type& delta_t,
                const potential_type& potential,
                const dimensionCount_type& dimensionCount)
  : ::xml_schema::type (),
    outputFile_ (outputFile, ::xml_schema::flags (), this),
    inputs_ (inputs, ::xml_schema::flags (), this),
    writeFrequency_ (writeFrequency, ::xml_schema::flags (), this),
    t_end_ (t_end, ::xml_schema::flags (), this),
    delta_t_ (delta_t, ::xml_schema::flags (), this),
    potential_ (potential, ::xml_schema::flags (), this),
    domain_ (::xml_schema::flags (), this),
    brownianMotion_ (::xml_schema::flags (), this),
    thermostat_ (::xml_schema::flags (), this),
    dimensionCount_ (dimensionCount, ::xml_schema::flags (), this),
    gravitation_ (::xml_schema::flags (), this)
  {
  }

  simulation_t::
  simulation_t (const simulation_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    outputFile_ (x.outputFile_, f, this),
    inputs_ (x.inputs_, f, this),
    writeFrequency_ (x.writeFrequency_, f, this),
    t_end_ (x.t_end_, f, this),
    delta_t_ (x.delta_t_, f, this),
    potential_ (x.potential_, f, this),
    domain_ (x.domain_, f, this),
    brownianMotion_ (x.brownianMotion_, f, this),
    thermostat_ (x.thermostat_, f, this),
    dimensionCount_ (x.dimensionCount_, f, this),
    gravitation_ (x.gravitation_, f, this)
  {
  }

  simulation_t::
  simulation_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    outputFile_ (f, this),
    inputs_ (f, this),
    writeFrequency_ (f, this),
    t_end_ (f, this),
    delta_t_ (f, this),
    potential_ (f, this),
    domain_ (f, this),
    brownianMotion_ (f, this),
    thermostat_ (f, this),
    dimensionCount_ (f, this),
    gravitation_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void simulation_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // outputFile
      //
      if (n.name () == "outputFile" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< outputFile_type > r (
          outputFile_traits::create (i, f, this));

        if (!outputFile_.present ())
        {
          this->outputFile_.set (r);
          continue;
        }
      }

      // inputs
      //
      if (n.name () == "inputs" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< inputs_type > r (
          inputs_traits::create (i, f, this));

        if (!inputs_.present ())
        {
          this->inputs_.set (r);
          continue;
        }
      }

      // writeFrequency
      //
      if (n.name () == "writeFrequency" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        if (!writeFrequency_.present ())
        {
          this->writeFrequency_.set (writeFrequency_traits::create (i, f, this));
          continue;
        }
      }

      // t_end
      //
      if (n.name () == "t_end" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< t_end_type > r (
          t_end_traits::create (i, f, this));

        if (!t_end_.present ())
        {
          this->t_end_.set (r);
          continue;
        }
      }

      // delta_t
      //
      if (n.name () == "delta_t" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< delta_t_type > r (
          delta_t_traits::create (i, f, this));

        if (!delta_t_.present ())
        {
          this->delta_t_.set (r);
          continue;
        }
      }

      // potential
      //
      if (n.name () == "potential" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< potential_type > r (
          potential_traits::create (i, f, this));

        if (!potential_.present ())
        {
          this->potential_.set (r);
          continue;
        }
      }

      // domain
      //
      if (n.name () == "domain" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< domain_type > r (
          domain_traits::create (i, f, this));

        if (!this->domain_)
        {
          this->domain_.set (r);
          continue;
        }
      }

      // brownianMotion
      //
      if (n.name () == "brownianMotion" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< brownianMotion_type > r (
          brownianMotion_traits::create (i, f, this));

        if (!this->brownianMotion_)
        {
          this->brownianMotion_.set (r);
          continue;
        }
      }

      // thermostat
      //
      if (n.name () == "thermostat" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< thermostat_type > r (
          thermostat_traits::create (i, f, this));

        if (!this->thermostat_)
        {
          this->thermostat_.set (r);
          continue;
        }
      }

      // dimensionCount
      //
      if (n.name () == "dimensionCount" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< dimensionCount_type > r (
          dimensionCount_traits::create (i, f, this));

        if (!dimensionCount_.present ())
        {
          this->dimensionCount_.set (r);
          continue;
        }
      }

      // gravitation
      //
      if (n.name () == "gravitation" && n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
      {
        ::std::auto_ptr< gravitation_type > r (
          gravitation_traits::create (i, f, this));

        if (!this->gravitation_)
        {
          this->gravitation_.set (r);
          continue;
        }
      }

      break;
    }

    if (!outputFile_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "outputFile",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!inputs_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "inputs",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!writeFrequency_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "writeFrequency",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!t_end_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "t_end",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!delta_t_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "delta_t",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!potential_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "potential",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }

    if (!dimensionCount_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dimensionCount",
        "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
    }
  }

  simulation_t* simulation_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class simulation_t (*this, f, c);
  }

  simulation_t::
  ~simulation_t ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace PSE_Molekulardynamik_WS12
{
  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
      ::PSE_Molekulardynamik_WS12::simulation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
      ::PSE_Molekulardynamik_WS12::simulation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
      ::PSE_Molekulardynamik_WS12::simulation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::PSE_Molekulardynamik_WS12::simulation (isrc, f, p);
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::PSE_Molekulardynamik_WS12::simulation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::PSE_Molekulardynamik_WS12::simulation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::PSE_Molekulardynamik_WS12::simulation (isrc, f, p);
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::PSE_Molekulardynamik_WS12::simulation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::PSE_Molekulardynamik_WS12::simulation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
      ::PSE_Molekulardynamik_WS12::simulation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
      ::PSE_Molekulardynamik_WS12::simulation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
      ::PSE_Molekulardynamik_WS12::simulation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
        ::PSE_Molekulardynamik_WS12::simulation (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "simulation" &&
        n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
    {
      ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
        ::xsd::cxx::tree::traits< ::PSE_Molekulardynamik_WS12::simulation_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulation",
      "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
  }

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "simulation" &&
        n.namespace_ () == "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12")
    {
      ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t > r (
        ::xsd::cxx::tree::traits< ::PSE_Molekulardynamik_WS12::simulation_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulation",
      "http://www5.in.tum.de/wiki/index.php/PSE_Molekulardynamik_WS12");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

