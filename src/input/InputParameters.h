// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef INPUT_PARAMETERS_H
#define INPUT_PARAMETERS_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace PSE_Molekulardynamik_WS12
{
  class nonEmptyString_t;
  class positiveDecimal_t;
  class nonNegativeDecimal_t;
  class dimensionCount_t;
  class positiveDecimalVector_t;
  class decimalVector_t;
  class positiveIntegerVector_t;
  class nonNegativeIntegerVector_t;
  class inputType_t;
  class inputFile_t;
  class cuboid_t;
  class sphere_t;
  class inputs_t;
  class potential_t;
  class boundary_t;
  class domain_t;
  class brownianMotion_t;
  class thermostat_t;
  class simulation_t;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace PSE_Molekulardynamik_WS12
{
  class nonEmptyString_t: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    nonEmptyString_t ();

    nonEmptyString_t (const char*);

    nonEmptyString_t (const ::std::string&);

    nonEmptyString_t (const ::xml_schema::string&);

    nonEmptyString_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    nonEmptyString_t (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    nonEmptyString_t (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    nonEmptyString_t (const nonEmptyString_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual nonEmptyString_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nonEmptyString_t ();
  };

  class positiveDecimal_t: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    positiveDecimal_t (const ::xml_schema::decimal&);

    positiveDecimal_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    positiveDecimal_t (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    positiveDecimal_t (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    positiveDecimal_t (const positiveDecimal_t& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual positiveDecimal_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~positiveDecimal_t ();
  };

  class nonNegativeDecimal_t: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    nonNegativeDecimal_t (const ::xml_schema::decimal&);

    nonNegativeDecimal_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    nonNegativeDecimal_t (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    nonNegativeDecimal_t (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    nonNegativeDecimal_t (const nonNegativeDecimal_t& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual nonNegativeDecimal_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nonNegativeDecimal_t ();
  };

  class dimensionCount_t: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    dimensionCount_t (const ::xml_schema::positive_integer&);

    dimensionCount_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    dimensionCount_t (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    dimensionCount_t (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    dimensionCount_t (const dimensionCount_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual dimensionCount_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dimensionCount_t ();
  };

  class positiveDecimalVector_t: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    void
    x (::std::auto_ptr< x_type > p);

    // y
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    void
    y (::std::auto_ptr< y_type > p);

    // z
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    void
    z (::std::auto_ptr< z_type > p);

    // Constructors.
    //
    positiveDecimalVector_t (const x_type&,
                             const y_type&,
                             const z_type&);

    positiveDecimalVector_t (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    positiveDecimalVector_t (const positiveDecimalVector_t& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual positiveDecimalVector_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~positiveDecimalVector_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class decimalVector_t: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::xml_schema::decimal x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char, ::xsd::cxx::tree::schema_type::decimal > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    // 
    typedef ::xml_schema::decimal y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char, ::xsd::cxx::tree::schema_type::decimal > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // z
    // 
    typedef ::xml_schema::decimal z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char, ::xsd::cxx::tree::schema_type::decimal > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    // Constructors.
    //
    decimalVector_t (const x_type&,
                     const y_type&,
                     const z_type&);

    decimalVector_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    decimalVector_t (const decimalVector_t& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual decimalVector_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~decimalVector_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class positiveIntegerVector_t: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    void
    x (::std::auto_ptr< x_type > p);

    // y
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    void
    y (::std::auto_ptr< y_type > p);

    // z
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    void
    z (::std::auto_ptr< z_type > p);

    // Constructors.
    //
    positiveIntegerVector_t (const x_type&,
                             const y_type&,
                             const z_type&);

    positiveIntegerVector_t (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    positiveIntegerVector_t (const positiveIntegerVector_t& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual positiveIntegerVector_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~positiveIntegerVector_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class nonNegativeIntegerVector_t: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    void
    x (::std::auto_ptr< x_type > p);

    // y
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    void
    y (::std::auto_ptr< y_type > p);

    // z
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    void
    z (::std::auto_ptr< z_type > p);

    // Constructors.
    //
    nonNegativeIntegerVector_t (const x_type&,
                                const y_type&,
                                const z_type&);

    nonNegativeIntegerVector_t (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    nonNegativeIntegerVector_t (const nonNegativeIntegerVector_t& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual nonNegativeIntegerVector_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nonNegativeIntegerVector_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class inputType_t: public ::xml_schema::string
  {
    public:
    enum value
    {
      list,
      cuboid
    };

    inputType_t (value v);

    inputType_t (const char* v);

    inputType_t (const ::std::string& v);

    inputType_t (const ::xml_schema::string& v);

    inputType_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    inputType_t (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    inputType_t (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    inputType_t (const inputType_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual inputType_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    inputType_t&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_inputType_t_convert ();
    }

    protected:
    value
    _xsd_inputType_t_convert () const;

    public:
    static const char* const _xsd_inputType_t_literals_[2];
    static const value _xsd_inputType_t_indexes_[2];
  };

  class inputFile_t: public ::PSE_Molekulardynamik_WS12::nonEmptyString_t
  {
    public:
    // type
    // 
    typedef ::PSE_Molekulardynamik_WS12::inputType_t type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::auto_ptr< type_type > p);

    // Constructors.
    //
    inputFile_t (const type_type&);

    inputFile_t (const char*,
                 const type_type&);

    inputFile_t (const ::std::string&,
                 const type_type&);

    inputFile_t (const ::xml_schema::string&,
                 const type_type&);

    inputFile_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    inputFile_t (const inputFile_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual inputFile_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~inputFile_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class cuboid_t: public ::xml_schema::type
  {
    public:
    // position
    // 
    typedef ::PSE_Molekulardynamik_WS12::decimalVector_t position_type;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_type&
    position () const;

    position_type&
    position ();

    void
    position (const position_type& x);

    void
    position (::std::auto_ptr< position_type > p);

    // velocity
    // 
    typedef ::PSE_Molekulardynamik_WS12::decimalVector_t velocity_type;
    typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

    const velocity_type&
    velocity () const;

    velocity_type&
    velocity ();

    void
    velocity (const velocity_type& x);

    void
    velocity (::std::auto_ptr< velocity_type > p);

    // dimensions
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveIntegerVector_t dimensions_type;
    typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

    const dimensions_type&
    dimensions () const;

    dimensions_type&
    dimensions ();

    void
    dimensions (const dimensions_type& x);

    void
    dimensions (::std::auto_ptr< dimensions_type > p);

    // mass
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    void
    mass (::std::auto_ptr< mass_type > p);

    // distance
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t distance_type;
    typedef ::xsd::cxx::tree::traits< distance_type, char > distance_traits;

    const distance_type&
    distance () const;

    distance_type&
    distance ();

    void
    distance (const distance_type& x);

    void
    distance (::std::auto_ptr< distance_type > p);

    // sigma
    // 
    typedef ::xml_schema::decimal sigma_type;
    typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::decimal > sigma_traits;

    const sigma_type&
    sigma () const;

    sigma_type&
    sigma ();

    void
    sigma (const sigma_type& x);

    // epsilon
    // 
    typedef ::xml_schema::decimal epsilon_type;
    typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::decimal > epsilon_traits;

    const epsilon_type&
    epsilon () const;

    epsilon_type&
    epsilon ();

    void
    epsilon (const epsilon_type& x);

    // type
    // 
    typedef ::xml_schema::non_negative_integer type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    // Constructors.
    //
    cuboid_t (const position_type&,
              const velocity_type&,
              const dimensions_type&,
              const mass_type&,
              const distance_type&,
              const sigma_type&,
              const epsilon_type&,
              const type_type&);

    cuboid_t (::std::auto_ptr< position_type >&,
              ::std::auto_ptr< velocity_type >&,
              ::std::auto_ptr< dimensions_type >&,
              const mass_type&,
              const distance_type&,
              const sigma_type&,
              const epsilon_type&,
              const type_type&);

    cuboid_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    cuboid_t (const cuboid_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual cuboid_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~cuboid_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< position_type > position_;
    ::xsd::cxx::tree::one< velocity_type > velocity_;
    ::xsd::cxx::tree::one< dimensions_type > dimensions_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    ::xsd::cxx::tree::one< distance_type > distance_;
    ::xsd::cxx::tree::one< sigma_type > sigma_;
    ::xsd::cxx::tree::one< epsilon_type > epsilon_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class sphere_t: public ::xml_schema::type
  {
    public:
    // position
    // 
    typedef ::PSE_Molekulardynamik_WS12::decimalVector_t position_type;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_type&
    position () const;

    position_type&
    position ();

    void
    position (const position_type& x);

    void
    position (::std::auto_ptr< position_type > p);

    // velocity
    // 
    typedef ::PSE_Molekulardynamik_WS12::decimalVector_t velocity_type;
    typedef ::xsd::cxx::tree::traits< velocity_type, char > velocity_traits;

    const velocity_type&
    velocity () const;

    velocity_type&
    velocity ();

    void
    velocity (const velocity_type& x);

    void
    velocity (::std::auto_ptr< velocity_type > p);

    // radiusDimension
    // 
    typedef ::xml_schema::positive_integer radiusDimension_type;
    typedef ::xsd::cxx::tree::traits< radiusDimension_type, char > radiusDimension_traits;

    const radiusDimension_type&
    radiusDimension () const;

    radiusDimension_type&
    radiusDimension ();

    void
    radiusDimension (const radiusDimension_type& x);

    // mass
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t mass_type;
    typedef ::xsd::cxx::tree::traits< mass_type, char > mass_traits;

    const mass_type&
    mass () const;

    mass_type&
    mass ();

    void
    mass (const mass_type& x);

    void
    mass (::std::auto_ptr< mass_type > p);

    // distance
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t distance_type;
    typedef ::xsd::cxx::tree::traits< distance_type, char > distance_traits;

    const distance_type&
    distance () const;

    distance_type&
    distance ();

    void
    distance (const distance_type& x);

    void
    distance (::std::auto_ptr< distance_type > p);

    // sigma
    // 
    typedef ::xml_schema::decimal sigma_type;
    typedef ::xsd::cxx::tree::traits< sigma_type, char, ::xsd::cxx::tree::schema_type::decimal > sigma_traits;

    const sigma_type&
    sigma () const;

    sigma_type&
    sigma ();

    void
    sigma (const sigma_type& x);

    // epsilon
    // 
    typedef ::xml_schema::decimal epsilon_type;
    typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::decimal > epsilon_traits;

    const epsilon_type&
    epsilon () const;

    epsilon_type&
    epsilon ();

    void
    epsilon (const epsilon_type& x);

    // type
    // 
    typedef ::xml_schema::non_negative_integer type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    // Constructors.
    //
    sphere_t (const position_type&,
              const velocity_type&,
              const radiusDimension_type&,
              const mass_type&,
              const distance_type&,
              const sigma_type&,
              const epsilon_type&,
              const type_type&);

    sphere_t (::std::auto_ptr< position_type >&,
              ::std::auto_ptr< velocity_type >&,
              const radiusDimension_type&,
              const mass_type&,
              const distance_type&,
              const sigma_type&,
              const epsilon_type&,
              const type_type&);

    sphere_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    sphere_t (const sphere_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual sphere_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~sphere_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< position_type > position_;
    ::xsd::cxx::tree::one< velocity_type > velocity_;
    ::xsd::cxx::tree::one< radiusDimension_type > radiusDimension_;
    ::xsd::cxx::tree::one< mass_type > mass_;
    ::xsd::cxx::tree::one< distance_type > distance_;
    ::xsd::cxx::tree::one< sigma_type > sigma_;
    ::xsd::cxx::tree::one< epsilon_type > epsilon_;
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class inputs_t: public ::xml_schema::type
  {
    public:
    // inputFile
    // 
    typedef ::PSE_Molekulardynamik_WS12::inputFile_t inputFile_type;
    typedef ::xsd::cxx::tree::sequence< inputFile_type > inputFile_sequence;
    typedef inputFile_sequence::iterator inputFile_iterator;
    typedef inputFile_sequence::const_iterator inputFile_const_iterator;
    typedef ::xsd::cxx::tree::traits< inputFile_type, char > inputFile_traits;

    const inputFile_sequence&
    inputFile () const;

    inputFile_sequence&
    inputFile ();

    void
    inputFile (const inputFile_sequence& s);

    // cuboid
    // 
    typedef ::PSE_Molekulardynamik_WS12::cuboid_t cuboid_type;
    typedef ::xsd::cxx::tree::sequence< cuboid_type > cuboid_sequence;
    typedef cuboid_sequence::iterator cuboid_iterator;
    typedef cuboid_sequence::const_iterator cuboid_const_iterator;
    typedef ::xsd::cxx::tree::traits< cuboid_type, char > cuboid_traits;

    const cuboid_sequence&
    cuboid () const;

    cuboid_sequence&
    cuboid ();

    void
    cuboid (const cuboid_sequence& s);

    // sphere
    // 
    typedef ::PSE_Molekulardynamik_WS12::sphere_t sphere_type;
    typedef ::xsd::cxx::tree::sequence< sphere_type > sphere_sequence;
    typedef sphere_sequence::iterator sphere_iterator;
    typedef sphere_sequence::const_iterator sphere_const_iterator;
    typedef ::xsd::cxx::tree::traits< sphere_type, char > sphere_traits;

    const sphere_sequence&
    sphere () const;

    sphere_sequence&
    sphere ();

    void
    sphere (const sphere_sequence& s);

    // Constructors.
    //
    inputs_t ();

    inputs_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    inputs_t (const inputs_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual inputs_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~inputs_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    inputFile_sequence inputFile_;
    cuboid_sequence cuboid_;
    sphere_sequence sphere_;
  };

  class potential_t: public ::xml_schema::string
  {
    public:
    enum value
    {
      gravitational,
      lenard_jones
    };

    potential_t (value v);

    potential_t (const char* v);

    potential_t (const ::std::string& v);

    potential_t (const ::xml_schema::string& v);

    potential_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    potential_t (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    potential_t (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    potential_t (const potential_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual potential_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    potential_t&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_potential_t_convert ();
    }

    protected:
    value
    _xsd_potential_t_convert () const;

    public:
    static const char* const _xsd_potential_t_literals_[2];
    static const value _xsd_potential_t_indexes_[2];
  };

  class boundary_t: public ::xml_schema::string
  {
    public:
    enum value
    {
      outflow,
      reflecting
    };

    boundary_t (value v);

    boundary_t (const char* v);

    boundary_t (const ::std::string& v);

    boundary_t (const ::xml_schema::string& v);

    boundary_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    boundary_t (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    boundary_t (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    boundary_t (const boundary_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual boundary_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    boundary_t&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_boundary_t_convert ();
    }

    protected:
    value
    _xsd_boundary_t_convert () const;

    public:
    static const char* const _xsd_boundary_t_literals_[2];
    static const value _xsd_boundary_t_indexes_[2];
  };

  class domain_t: public ::xml_schema::type
  {
    public:
    // dimensions
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeIntegerVector_t dimensions_type;
    typedef ::xsd::cxx::tree::traits< dimensions_type, char > dimensions_traits;

    const dimensions_type&
    dimensions () const;

    dimensions_type&
    dimensions ();

    void
    dimensions (const dimensions_type& x);

    void
    dimensions (::std::auto_ptr< dimensions_type > p);

    // boundary
    // 
    typedef ::PSE_Molekulardynamik_WS12::boundary_t boundary_type;
    typedef ::xsd::cxx::tree::traits< boundary_type, char > boundary_traits;

    const boundary_type&
    boundary () const;

    boundary_type&
    boundary ();

    void
    boundary (const boundary_type& x);

    void
    boundary (::std::auto_ptr< boundary_type > p);

    // cutoff
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t cutoff_type;
    typedef ::xsd::cxx::tree::traits< cutoff_type, char > cutoff_traits;

    const cutoff_type&
    cutoff () const;

    cutoff_type&
    cutoff ();

    void
    cutoff (const cutoff_type& x);

    void
    cutoff (::std::auto_ptr< cutoff_type > p);

    // Constructors.
    //
    domain_t (const dimensions_type&,
              const boundary_type&,
              const cutoff_type&);

    domain_t (::std::auto_ptr< dimensions_type >&,
              const boundary_type&,
              const cutoff_type&);

    domain_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    domain_t (const domain_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual domain_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~domain_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< dimensions_type > dimensions_;
    ::xsd::cxx::tree::one< boundary_type > boundary_;
    ::xsd::cxx::tree::one< cutoff_type > cutoff_;
  };

  class brownianMotion_t: public ::xml_schema::type
  {
    public:
    // meanVelocity
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t meanVelocity_type;
    typedef ::xsd::cxx::tree::traits< meanVelocity_type, char > meanVelocity_traits;

    const meanVelocity_type&
    meanVelocity () const;

    meanVelocity_type&
    meanVelocity ();

    void
    meanVelocity (const meanVelocity_type& x);

    void
    meanVelocity (::std::auto_ptr< meanVelocity_type > p);

    // Constructors.
    //
    brownianMotion_t (const meanVelocity_type&);

    brownianMotion_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    brownianMotion_t (const brownianMotion_t& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual brownianMotion_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~brownianMotion_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< meanVelocity_type > meanVelocity_;
  };

  class thermostat_t: public ::xml_schema::type
  {
    public:
    // initialT
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t initialT_type;
    typedef ::xsd::cxx::tree::traits< initialT_type, char > initialT_traits;

    const initialT_type&
    initialT () const;

    initialT_type&
    initialT ();

    void
    initialT (const initialT_type& x);

    void
    initialT (::std::auto_ptr< initialT_type > p);

    // nThermostat
    // 
    typedef ::xml_schema::positive_integer nThermostat_type;
    typedef ::xsd::cxx::tree::traits< nThermostat_type, char > nThermostat_traits;

    const nThermostat_type&
    nThermostat () const;

    nThermostat_type&
    nThermostat ();

    void
    nThermostat (const nThermostat_type& x);

    // targetT
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t targetT_type;
    typedef ::xsd::cxx::tree::traits< targetT_type, char > targetT_traits;

    const targetT_type&
    targetT () const;

    targetT_type&
    targetT ();

    void
    targetT (const targetT_type& x);

    void
    targetT (::std::auto_ptr< targetT_type > p);

    // diffT
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonNegativeDecimal_t diffT_type;
    typedef ::xsd::cxx::tree::traits< diffT_type, char > diffT_traits;

    const diffT_type&
    diffT () const;

    diffT_type&
    diffT ();

    void
    diffT (const diffT_type& x);

    void
    diffT (::std::auto_ptr< diffT_type > p);

    // nMax
    // 
    typedef ::xml_schema::positive_integer nMax_type;
    typedef ::xsd::cxx::tree::traits< nMax_type, char > nMax_traits;

    const nMax_type&
    nMax () const;

    nMax_type&
    nMax ();

    void
    nMax (const nMax_type& x);

    // Constructors.
    //
    thermostat_t (const initialT_type&,
                  const nThermostat_type&,
                  const targetT_type&,
                  const diffT_type&,
                  const nMax_type&);

    thermostat_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    thermostat_t (const thermostat_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual thermostat_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~thermostat_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< initialT_type > initialT_;
    ::xsd::cxx::tree::one< nThermostat_type > nThermostat_;
    ::xsd::cxx::tree::one< targetT_type > targetT_;
    ::xsd::cxx::tree::one< diffT_type > diffT_;
    ::xsd::cxx::tree::one< nMax_type > nMax_;
  };

  class simulation_t: public ::xml_schema::type
  {
    public:
    // outputFile
    // 
    typedef ::PSE_Molekulardynamik_WS12::nonEmptyString_t outputFile_type;
    typedef ::xsd::cxx::tree::traits< outputFile_type, char > outputFile_traits;

    const outputFile_type&
    outputFile () const;

    outputFile_type&
    outputFile ();

    void
    outputFile (const outputFile_type& x);

    void
    outputFile (::std::auto_ptr< outputFile_type > p);

    // inputs
    // 
    typedef ::PSE_Molekulardynamik_WS12::inputs_t inputs_type;
    typedef ::xsd::cxx::tree::traits< inputs_type, char > inputs_traits;

    const inputs_type&
    inputs () const;

    inputs_type&
    inputs ();

    void
    inputs (const inputs_type& x);

    void
    inputs (::std::auto_ptr< inputs_type > p);

    // writeFrequency
    // 
    typedef ::xml_schema::positive_integer writeFrequency_type;
    typedef ::xsd::cxx::tree::traits< writeFrequency_type, char > writeFrequency_traits;

    const writeFrequency_type&
    writeFrequency () const;

    writeFrequency_type&
    writeFrequency ();

    void
    writeFrequency (const writeFrequency_type& x);

    // t_end
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t t_end_type;
    typedef ::xsd::cxx::tree::traits< t_end_type, char > t_end_traits;

    const t_end_type&
    t_end () const;

    t_end_type&
    t_end ();

    void
    t_end (const t_end_type& x);

    void
    t_end (::std::auto_ptr< t_end_type > p);

    // delta_t
    // 
    typedef ::PSE_Molekulardynamik_WS12::positiveDecimal_t delta_t_type;
    typedef ::xsd::cxx::tree::traits< delta_t_type, char > delta_t_traits;

    const delta_t_type&
    delta_t () const;

    delta_t_type&
    delta_t ();

    void
    delta_t (const delta_t_type& x);

    void
    delta_t (::std::auto_ptr< delta_t_type > p);

    // potential
    // 
    typedef ::PSE_Molekulardynamik_WS12::potential_t potential_type;
    typedef ::xsd::cxx::tree::traits< potential_type, char > potential_traits;

    const potential_type&
    potential () const;

    potential_type&
    potential ();

    void
    potential (const potential_type& x);

    void
    potential (::std::auto_ptr< potential_type > p);

    // domain
    // 
    typedef ::PSE_Molekulardynamik_WS12::domain_t domain_type;
    typedef ::xsd::cxx::tree::optional< domain_type > domain_optional;
    typedef ::xsd::cxx::tree::traits< domain_type, char > domain_traits;

    const domain_optional&
    domain () const;

    domain_optional&
    domain ();

    void
    domain (const domain_type& x);

    void
    domain (const domain_optional& x);

    void
    domain (::std::auto_ptr< domain_type > p);

    // brownianMotion
    // 
    typedef ::PSE_Molekulardynamik_WS12::brownianMotion_t brownianMotion_type;
    typedef ::xsd::cxx::tree::optional< brownianMotion_type > brownianMotion_optional;
    typedef ::xsd::cxx::tree::traits< brownianMotion_type, char > brownianMotion_traits;

    const brownianMotion_optional&
    brownianMotion () const;

    brownianMotion_optional&
    brownianMotion ();

    void
    brownianMotion (const brownianMotion_type& x);

    void
    brownianMotion (const brownianMotion_optional& x);

    void
    brownianMotion (::std::auto_ptr< brownianMotion_type > p);

    // thermostat
    // 
    typedef ::PSE_Molekulardynamik_WS12::thermostat_t thermostat_type;
    typedef ::xsd::cxx::tree::optional< thermostat_type > thermostat_optional;
    typedef ::xsd::cxx::tree::traits< thermostat_type, char > thermostat_traits;

    const thermostat_optional&
    thermostat () const;

    thermostat_optional&
    thermostat ();

    void
    thermostat (const thermostat_type& x);

    void
    thermostat (const thermostat_optional& x);

    void
    thermostat (::std::auto_ptr< thermostat_type > p);

    // dimensionCount
    // 
    typedef ::PSE_Molekulardynamik_WS12::dimensionCount_t dimensionCount_type;
    typedef ::xsd::cxx::tree::traits< dimensionCount_type, char > dimensionCount_traits;

    const dimensionCount_type&
    dimensionCount () const;

    dimensionCount_type&
    dimensionCount ();

    void
    dimensionCount (const dimensionCount_type& x);

    void
    dimensionCount (::std::auto_ptr< dimensionCount_type > p);

    // Constructors.
    //
    simulation_t (const outputFile_type&,
                  const inputs_type&,
                  const writeFrequency_type&,
                  const t_end_type&,
                  const delta_t_type&,
                  const potential_type&,
                  const dimensionCount_type&);

    simulation_t (const outputFile_type&,
                  ::std::auto_ptr< inputs_type >&,
                  const writeFrequency_type&,
                  const t_end_type&,
                  const delta_t_type&,
                  const potential_type&,
                  const dimensionCount_type&);

    simulation_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    simulation_t (const simulation_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual simulation_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~simulation_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< outputFile_type > outputFile_;
    ::xsd::cxx::tree::one< inputs_type > inputs_;
    ::xsd::cxx::tree::one< writeFrequency_type > writeFrequency_;
    ::xsd::cxx::tree::one< t_end_type > t_end_;
    ::xsd::cxx::tree::one< delta_t_type > delta_t_;
    ::xsd::cxx::tree::one< potential_type > potential_;
    domain_optional domain_;
    brownianMotion_optional brownianMotion_;
    thermostat_optional thermostat_;
    ::xsd::cxx::tree::one< dimensionCount_type > dimensionCount_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace PSE_Molekulardynamik_WS12
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::PSE_Molekulardynamik_WS12::simulation_t >
  simulation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // INPUT_PARAMETERS_H
